cfa_model,
data = cfa_df,
std.lv = TRUE,
estimator = "WLSMV",
ordered = ordered_items,
start = start_list
)
start_list
# --- Robust CFA data preparation: align all variable names and types ---
# Use only variables present in both Lambda0 and df_mix2_clean
cfa_vars <- rownames(Lambda0)
missing_cfa_vars <- setdiff(cfa_vars, names(df_mix2_clean))
if (length(missing_cfa_vars) > 0) {
cat("\n[CFA ERROR] The following variables in Lambda0 are missing from df_mix2_clean:\n")
print(missing_cfa_vars)
stop("Aborting CFA: variables missing from data.")
}
cfa_df <- df_mix2_clean[, cfa_vars]
# Identify continuous variables as those in cont_vars and present in cfa_df
all_cont_vars <- c("Q62__How_much_VEGETABLES_do_you_harvest_per_year_from_this_plot_kilograms__continuous",
"Q50__How_much_land_that_is_yours_do_you_cultivate_bigha__continuous",
"Q52__On_how_much_land_do_you_grow_vegetables_bigha__continuous",
"Q109__What_is_your_households_yearly_income_overall_including_agriculture_NPR__continuous",
"Q0__hope_total__continuous",
"Q0__self_control_score__continuous",
"Q5__AgeYears__continuous",
"Q108__What_is_your_households_yearly_income_from_agriculture_NPR__continuous")
cont_vars <- intersect(all_cont_vars, names(cfa_df))
# Only scale and coerce those present and non-empty
for (v in cont_vars) {
if (v %in% names(cfa_df) && length(cfa_df[[v]]) == nrow(cfa_df)) {
if (!is.numeric(cfa_df[[v]])) {
cfa_df[[v]] <- as.numeric(cfa_df[[v]])
}
} else {
cat(sprintf("[CFA WARNING] Skipping %s: not present or wrong length in cfa_df\n", v))
}
}
if (length(cont_vars) > 0) {
cfa_df[cont_vars] <- scale(cfa_df[cont_vars])
}
# Identify ordered variables as those expected and present in cfa_df
all_ordered_items <- c("Q112__Generally_speaking_how_would_you_define_your_farming__ordinal",
"Q0__average_of_farming_practices__ordinal",
"Q70__in_the_past_12_months_did_you_receive_any_info_from_anyone_on_agriculture__binary__1")
ordered_items <- intersect(all_ordered_items, names(cfa_df))
for (v in ordered_items) {
if (!is.ordered(cfa_df[[v]])) {
cfa_df[[v]] <- ordered(cfa_df[[v]], levels = sort(unique(cfa_df[[v]])))
}
}
# --- Generate CFA model syntax from Lambda0 ---
cfa_model_lines <- c()
for (j in 1:ncol(Lambda0)) {
factor_name <- colnames(Lambda0)[j]
items <- rownames(Lambda0)[abs(Lambda0[, j]) > 0]
if (length(items) > 0) {
cfa_model_lines <- c(cfa_model_lines, paste0(factor_name, " =~ ", paste(items, collapse = " + ")))
}
}
cfa_model_lines <- c(cfa_model_lines, "F1 ~~ F2")
cfa_model <- paste(cfa_model_lines, collapse = "\n")
cat("CFA model syntax generated from Lambda0:\n", cfa_model, "\n")
# --- Build start_list only for free parameters in the model ---
model_pars <- lavaan::lavaanify(cfa_model, fixed.x = FALSE)
free_loadings <- subset(model_pars, op == "=~" & free > 0)
start_list <- list()
for (i in seq_len(nrow(free_loadings))) {
factor_name <- free_loadings$lhs[i]
var_name <- free_loadings$rhs[i]
if (!is.null(Lambda0[var_name, factor_name]) && !is.na(Lambda0[var_name, factor_name])) {
start_list[[paste0(factor_name, "=~", var_name)]] <- Lambda0[var_name, factor_name]
}
}
# --- Fit CFA model using raw data (required for WLSMV and mixed data) ---
# See: https://lavaan.ugent.be/tutorial/cfa.html
fit_cfa <- lavaan::cfa(
cfa_model,
data = cfa_df,
std.lv = TRUE,
estimator = "WLSMV",
ordered = ordered_items,
start = start_list
)
start_list
model_pars
free_loadings
# --- Robust CFA data preparation: align all variable names and types ---
# Use only variables present in both Lambda0 and df_mix2_clean
cfa_vars <- rownames(Lambda0)
missing_cfa_vars <- setdiff(cfa_vars, names(df_mix2_clean))
if (length(missing_cfa_vars) > 0) {
cat("\n[CFA ERROR] The following variables in Lambda0 are missing from df_mix2_clean:\n")
print(missing_cfa_vars)
stop("Aborting CFA: variables missing from data.")
}
cfa_df <- df_mix2_clean[, cfa_vars]
# Identify continuous variables as those in cont_vars and present in cfa_df
all_cont_vars <- c("Q62__How_much_VEGETABLES_do_you_harvest_per_year_from_this_plot_kilograms__continuous",
"Q50__How_much_land_that_is_yours_do_you_cultivate_bigha__continuous",
"Q52__On_how_much_land_do_you_grow_vegetables_bigha__continuous",
"Q109__What_is_your_households_yearly_income_overall_including_agriculture_NPR__continuous",
"Q0__hope_total__continuous",
"Q0__self_control_score__continuous",
"Q5__AgeYears__continuous",
"Q108__What_is_your_households_yearly_income_from_agriculture_NPR__continuous")
cont_vars <- intersect(all_cont_vars, names(cfa_df))
# Only scale and coerce those present and non-empty
for (v in cont_vars) {
if (v %in% names(cfa_df) && length(cfa_df[[v]]) == nrow(cfa_df)) {
if (!is.numeric(cfa_df[[v]])) {
cfa_df[[v]] <- as.numeric(cfa_df[[v]])
}
} else {
cat(sprintf("[CFA WARNING] Skipping %s: not present or wrong length in cfa_df\n", v))
}
}
if (length(cont_vars) > 0) {
cfa_df[cont_vars] <- scale(cfa_df[cont_vars])
}
# Identify ordered variables as those expected and present in cfa_df
all_ordered_items <- c("Q112__Generally_speaking_how_would_you_define_your_farming__ordinal",
"Q0__average_of_farming_practices__ordinal",
"Q70__in_the_past_12_months_did_you_receive_any_info_from_anyone_on_agriculture__binary__1")
ordered_items <- intersect(all_ordered_items, names(cfa_df))
for (v in ordered_items) {
if (!is.ordered(cfa_df[[v]])) {
cfa_df[[v]] <- ordered(cfa_df[[v]], levels = sort(unique(cfa_df[[v]])))
}
}
# --- Generate CFA model syntax from Lambda0 ---
cfa_model_lines <- c()
for (j in 1:ncol(Lambda0)) {
factor_name <- colnames(Lambda0)[j]
items <- rownames(Lambda0)[abs(Lambda0[, j]) > 0]
if (length(items) > 0) {
cfa_model_lines <- c(cfa_model_lines, paste0(factor_name, " =~ ", paste(items, collapse = " + ")))
}
}
cfa_model_lines <- c(cfa_model_lines, "F1 ~~ F2")
cfa_model <- paste(cfa_model_lines, collapse = "\n")
cat("CFA model syntax generated from Lambda0:\n", cfa_model, "\n")
# --- Build start_list only for free loadings in the model ---
model_pars <- lavaan::lavaanify(cfa_model, fixed.x = FALSE)
free_loadings <- subset(model_pars, op == "=~" & free > 0)
# Defensive: trim whitespace from all names
free_loadings$lhs <- trimws(free_loadings$lhs)
free_loadings$rhs <- trimws(free_loadings$rhs)
rownames(Lambda0) <- trimws(rownames(Lambda0))
colnames(Lambda0) <- trimws(colnames(Lambda0))
start_list <- list()
for (i in seq_len(nrow(free_loadings))) {
factor_name <- free_loadings$lhs[i]
var_name <- free_loadings$rhs[i]
key <- paste0(factor_name, "=~", var_name)
if (!is.null(Lambda0[var_name, factor_name]) && !is.na(Lambda0[var_name, factor_name])) {
start_list[[key]] <- Lambda0[var_name, factor_name]
} else {
cat(sprintf("[CFA WARNING] No start value for %s\n", key))
}
}
# Check for duplicate keys in start_list
start_keys <- names(start_list)
dup_keys <- start_keys[duplicated(start_keys)]
if (length(dup_keys) > 0) {
cat("[CFA ERROR] Duplicate keys in start_list:\n")
print(dup_keys)
stop("Duplicate keys in start_list; aborting.")
}
# Check for missing or extra parameters
free_keys <- paste0(free_loadings$lhs, "=~", free_loadings$rhs)
extra_keys <- setdiff(start_keys, free_keys)
missing_keys <- setdiff(free_keys, start_keys)
cat("start_list keys:\n"); print(start_keys)
cat("free_loadings keys:\n"); print(free_keys)
if (length(extra_keys) > 0) {
cat("[CFA ERROR] Extra keys in start_list not present in model:\n")
print(extra_keys)
stop("Extra keys in start_list; aborting.")
}
if (length(missing_keys) > 0) {
cat("[CFA ERROR] Missing keys in start_list for model parameters:\n")
print(missing_keys)
stop("Missing keys in start_list; aborting.")
}
# --- Fit CFA model using raw data (required for WLSMV and mixed data) ---
# See: https://lavaan.ugent.be/tutorial/cfa.html
fit_cfa <- lavaan::cfa(
cfa_model,
data = cfa_df,
std.lv = TRUE,
estimator = "WLSMV",
ordered = ordered_items,
start = start_list
)
# --- 1. Data preparation: align all variable names and types ---
cfa_vars <- rownames(Lambda0)
missing_cfa_vars <- setdiff(cfa_vars, names(df_mix2_clean))
if (length(missing_cfa_vars) > 0) {
cat("\n[CFA ERROR] The following variables in Lambda0 are missing from df_mix2_clean:\n")
print(missing_cfa_vars)
stop("Aborting CFA: variables missing from data.")
}
cfa_df <- df_mix2_clean[, cfa_vars, drop = FALSE]
# Identify continuous and ordered variables
all_cont_vars <- c(
"Q62__How_much_VEGETABLES_do_you_harvest_per_year_from_this_plot_kilograms__continuous",
"Q50__How_much_land_that_is_yours_do_you_cultivate_bigha__continuous",
"Q52__On_how_much_land_do_you_grow_vegetables_bigha__continuous",
"Q109__What_is_your_households_yearly_income_overall_including_agriculture_NPR__continuous",
"Q0__hope_total__continuous",
"Q0__self_control_score__continuous",
"Q5__AgeYears__continuous",
"Q108__What_is_your_households_yearly_income_from_agriculture_NPR__continuous"
)
cont_vars <- intersect(all_cont_vars, names(cfa_df))
all_ordered_items <- c(
"Q112__Generally_speaking_how_would_you_define_your_farming__ordinal",
"Q0__average_of_farming_practices__ordinal",
"Q70__in_the_past_12_months_did_you_receive_any_info_from_anyone_on_agriculture__binary__1"
)
ordered_items <- intersect(all_ordered_items, names(cfa_df))
# --- 2. Data diagnostics ---
cat("\n[CFA] Variable types:\n")
print(sapply(cfa_df, class))
cat("\n[CFA] Continuous variables to be scaled:\n")
print(cont_vars)
cat("\n[CFA] Ordered variables:\n")
print(ordered_items)
# Check for near-constant or all-missing variables
for (v in names(cfa_df)) {
unique_vals <- unique(na.omit(cfa_df[[v]]))
if (length(unique_vals) <= 1) {
cat(sprintf("[CFA WARNING] Variable %s is constant or all missing!\n", v))
}
}
# Check for high collinearity among continuous variables
if (length(cont_vars) > 1) {
cor_mat <- cor(cfa_df[cont_vars], use = "pairwise.complete.obs")
high_corrs <- which(abs(cor_mat) > 0.95 & abs(cor_mat) < 1, arr.ind = TRUE)
if (length(high_corrs) > 0) {
cat("[CFA WARNING] High collinearity among continuous variables:\n")
for (i in seq_len(nrow(high_corrs))) {
v1 <- rownames(cor_mat)[high_corrs[i, 1]]
v2 <- colnames(cor_mat)[high_corrs[i, 2]]
cat(sprintf("  %s and %s: %.3f\n", v1, v2, cor_mat[high_corrs[i, 1], high_corrs[i, 2]]))
}
}
}
# --- 3. Preprocessing: scale continuous, coerce ordered ---
for (v in cont_vars) {
if (!is.numeric(cfa_df[[v]])) cfa_df[[v]] <- as.numeric(cfa_df[[v]])
}
if (length(cont_vars) > 0) cfa_df[cont_vars] <- scale(cfa_df[cont_vars])
for (v in ordered_items) {
if (!is.ordered(cfa_df[[v]])) {
cfa_df[[v]] <- ordered(cfa_df[[v]], levels = sort(unique(cfa_df[[v]])))
}
}
# --- 4. Generate CFA model syntax from Lambda0 ---
cfa_model_lines <- c()
for (j in 1:ncol(Lambda0)) {
factor_name <- colnames(Lambda0)[j]
items <- rownames(Lambda0)[abs(Lambda0[, j]) > 0]
if (length(items) > 0) {
cfa_model_lines <- c(cfa_model_lines, paste0(factor_name, " =~ ", paste(items, collapse = " + ")))
}
}
# Add factor covariance
if (ncol(Lambda0) > 1) {
fac_covs <- combn(colnames(Lambda0), 2, FUN = function(x) paste(x[1], "~~", x[2]), simplify = TRUE)
cfa_model_lines <- c(cfa_model_lines, fac_covs)
}
cfa_model <- paste(cfa_model_lines, collapse = "\n")
cat("\n[CFA] Model syntax:\n", cfa_model, "\n")
# --- 5. Fit CFA model (let lavaan handle starting values) ---
fit_cfa <- tryCatch({
lavaan::cfa(
cfa_model,
data = cfa_df,
std.lv = TRUE,
estimator = "WLSMV",
ordered = ordered_items
)
}, error = function(e) {
cat("\n[CFA ERROR] lavaan::cfa failed:\n")
print(e)
return(NULL)
})
if (is.null(fit_cfa)) stop("CFA model did not fit. See error above.")
# --- 6. Diagnostics and output ---
cat("\n[CFA] Fit indices:\n")
print(lavaan::fitMeasures(fit_cfa, c("chisq", "df", "cfi", "rmsea", "srmr")))
cat("\n[CFA] Standardized loadings:\n")
print(lavaan::inspect(fit_cfa, "std")$lambda)
cat("\n[CFA] Modification indices (MI > 10):\n")
print(subset(lavaan::modindices(fit_cfa), mi > 10))
# --- 7. Save results and plot ---
saveRDS(fit_cfa, file = "fit_cfa.rds")
if (requireNamespace("semPlot", quietly = TRUE)) {
pdf("cfa_model_diagram.pdf", width = 10, height = 8)
semPlot::semPaths(fit_cfa, "std", whatLabels = "std", edge.label.cex = 1.1, layout = "tree", style = "lisrel")
dev.off()
}
# --- 8. Factor scores ---
factor_scores <- tryCatch({
lavPredict(fit_cfa, method = "Bartlett")
}, error = function(e) {
cat("[CFA WARNING] Could not compute factor scores:\n")
print(e)
return(NULL)
})
if (!is.null(factor_scores)) {
write.csv(factor_scores, "factor_scores.csv", row.names = TRUE)
}
# --- 9. Residuals heatmap ---
resid_mat_cfa <- lavaan::residuals(fit_cfa, type = "cor")$cov
heatmap(resid_mat_cfa, main = "CFA Residual Correlation Matrix", symm = TRUE)
# --- 1. Data preparation: align all variable names and types ---
cfa_vars <- rownames(Lambda0)
missing_cfa_vars <- setdiff(cfa_vars, names(df_mix2_clean))
if (length(missing_cfa_vars) > 0) {
cat("\n[CFA ERROR] The following variables in Lambda0 are missing from df_mix2_clean:\n")
print(missing_cfa_vars)
stop("Aborting CFA: variables missing from data.")
}
cfa_df <- df_mix2_clean[, cfa_vars, drop = FALSE]
# Identify continuous and ordered variables
all_cont_vars <- c(
"Q62__How_much_VEGETABLES_do_you_harvest_per_year_from_this_plot_kilograms__continuous",
"Q50__How_much_land_that_is_yours_do_you_cultivate_bigha__continuous",
"Q52__On_how_much_land_do_you_grow_vegetables_bigha__continuous",
"Q109__What_is_your_households_yearly_income_overall_including_agriculture_NPR__continuous",
"Q0__hope_total__continuous",
"Q0__self_control_score__continuous",
"Q5__AgeYears__continuous",
"Q108__What_is_your_households_yearly_income_from_agriculture_NPR__continuous"
)
cont_vars <- intersect(all_cont_vars, names(cfa_df))
all_ordered_items <- c(
"Q112__Generally_speaking_how_would_you_define_your_farming__ordinal",
"Q0__average_of_farming_practices__ordinal",
"Q70__in_the_past_12_months_did_you_receive_any_info_from_anyone_on_agriculture__binary__1"
)
ordered_items <- intersect(all_ordered_items, names(cfa_df))
# --- 2. Data diagnostics ---
cat("\n[CFA] Variable types:\n")
print(sapply(cfa_df, class))
cat("\n[CFA] Continuous variables to be scaled:\n")
print(cont_vars)
cat("\n[CFA] Ordered variables:\n")
print(ordered_items)
# Check for near-constant or all-missing variables
for (v in names(cfa_df)) {
unique_vals <- unique(na.omit(cfa_df[[v]]))
if (length(unique_vals) <= 1) {
cat(sprintf("[CFA WARNING] Variable %s is constant or all missing!\n", v))
}
}
# Check for high collinearity among continuous variables
if (length(cont_vars) > 1) {
cor_mat <- cor(cfa_df[cont_vars], use = "pairwise.complete.obs")
high_corrs <- which(abs(cor_mat) > 0.95 & abs(cor_mat) < 1, arr.ind = TRUE)
if (length(high_corrs) > 0) {
cat("[CFA WARNING] High collinearity among continuous variables:\n")
for (i in seq_len(nrow(high_corrs))) {
v1 <- rownames(cor_mat)[high_corrs[i, 1]]
v2 <- colnames(cor_mat)[high_corrs[i, 2]]
cat(sprintf("  %s and %s: %.3f\n", v1, v2, cor_mat[high_corrs[i, 1], high_corrs[i, 2]]))
}
}
}
# --- 3. Preprocessing: scale continuous, coerce ordered ---
for (v in cont_vars) {
if (!is.numeric(cfa_df[[v]])) cfa_df[[v]] <- as.numeric(cfa_df[[v]])
}
if (length(cont_vars) > 0) cfa_df[cont_vars] <- scale(cfa_df[cont_vars])
for (v in ordered_items) {
if (!is.ordered(cfa_df[[v]])) {
cfa_df[[v]] <- ordered(cfa_df[[v]], levels = sort(unique(cfa_df[[v]])))
}
}
# --- 4. Generate CFA model syntax from Lambda0 ---
cfa_model_lines <- c()
for (j in 1:ncol(Lambda0)) {
factor_name <- colnames(Lambda0)[j]
items <- rownames(Lambda0)[abs(Lambda0[, j]) > 0]
if (length(items) > 0) {
cfa_model_lines <- c(cfa_model_lines, paste0(factor_name, " =~ ", paste(items, collapse = " + ")))
}
}
# Add factor covariance
if (ncol(Lambda0) > 1) {
fac_covs <- combn(colnames(Lambda0), 2, FUN = function(x) paste(x[1], "~~", x[2]), simplify = TRUE)
cfa_model_lines <- c(cfa_model_lines, fac_covs)
}
cfa_model <- paste(cfa_model_lines, collapse = "\n")
cat("\n[CFA] Model syntax:\n", cfa_model, "\n")
# --- 5. Fit CFA model (let lavaan handle starting values) ---
fit_cfa <- tryCatch({
lavaan::cfa(
cfa_model,
data = cfa_df,
std.lv = TRUE,
estimator = "WLSMV",
ordered = ordered_items
)
}, error = function(e) {
cat("\n[CFA ERROR] lavaan::cfa failed:\n")
print(e)
return(NULL)
})
if (is.null(fit_cfa)) stop("CFA model did not fit. See error above.")
# --- 6. Diagnostics and output ---
cat("\n[CFA] Fit indices:\n")
print(lavaan::fitMeasures(fit_cfa, c("chisq", "df", "cfi", "rmsea", "srmr")))
cat("\n[CFA] Standardized loadings:\n")
print(lavaan::inspect(fit_cfa, "std")$lambda)
cat("\n[CFA] Modification indices (MI > 10):\n")
print(subset(lavaan::modindices(fit_cfa), mi > 10))
# --- 7. Save results and plot ---
saveRDS(fit_cfa, file = "fit_cfa.rds")
if (requireNamespace("semPlot", quietly = TRUE)) {
pdf("cfa_model_diagram.pdf", width = 10, height = 8)
semPlot::semPaths(fit_cfa, "std", whatLabels = "std", edge.label.cex = 1.1, layout = "tree", style = "lisrel")
dev.off()
}
# --- 8. Factor scores ---
factor_scores <- tryCatch({
lavPredict(fit_cfa, method = "Bartlett")
}, error = function(e) {
cat("[CFA WARNING] Could not compute factor scores:\n")
print(e)
return(NULL)
})
if (!is.null(factor_scores)) {
write.csv(factor_scores, "factor_scores.csv", row.names = TRUE)
}
# --- 9. Residuals heatmap ---
resid_mat_cfa <- lavaan::residuals(fit_cfa, type = "cor")$cov
heatmap(resid_mat_cfa, main = "CFA Residual Correlation Matrix", symm = TRUE)
# --- 10. Suggested model modification based on highest MI (do not remove indicators) ---
mod_indices <- lavaan::modindices(fit_cfa)
mod_indices <- mod_indices[order(-mod_indices$mi), ]
mod_indices_to_add <- subset(mod_indices, mi > 10 & !(op == "~1" | op == "~"))
if (nrow(mod_indices_to_add) > 0) {
top_mi <- mod_indices_to_add[1, ]
cat("\n[SUGGESTED MODIFICATION] Add the following to the model for improved fit (MI = ",
round(top_mi$mi, 2), "):\n  ",
top_mi$lhs, top_mi$op, top_mi$rhs, "\n", sep = "")
}
# --- Automated MI-based model refinement ---
max_steps <- 5  # Set the maximum number of MI-based modifications
cfa_model_refined <- cfa_model
fit_cfa_refined <- fit_cfa
added_mods <- character(0)
for (step in 1:max_steps) {
mi_ref <- lavaan::modindices(fit_cfa_refined)
mi_ref <- mi_ref[order(-mi_ref$mi), ]
mi_to_add <- subset(mi_ref, mi > 10 & !(op == "~1" | op == "~") & !paste(lhs, op, rhs) %in% added_mods)
if (nrow(mi_to_add) == 0) {
cat("\n[MI-REFINEMENT] No more MI > 10 to add. Stopping refinement.\n")
break
}
top_mi <- mi_to_add[1, ]
new_line <- paste(top_mi$lhs, top_mi$op, top_mi$rhs)
cfa_model_refined <- paste(cfa_model_refined, new_line, sep = "\n")
added_mods <- c(added_mods, new_line)
cat("\n[MI-REFINEMENT] Step", step, ": Adding", new_line, "(MI =", round(top_mi$mi, 2), ")\n")
fit_cfa_refined <- tryCatch({
lavaan::cfa(
cfa_model_refined,
data = cfa_df,
std.lv = TRUE,
estimator = "WLSMV",
ordered = ordered_items
)
}, error = function(e) {
cat("[MI-REFINEMENT ERROR] lavaan::cfa failed after adding:", new_line, "\n")
print(e)
return(fit_cfa_refined)  # Return previous fit
})
fit_indices_ref <- lavaan::fitMeasures(fit_cfa_refined, c("chisq", "df", "cfi", "rmsea", "srmr"))
cat("[MI-REFINEMENT] Fit indices after step", step, ":\n")
print(fit_indices_ref)
}
# --- Final model diagnostics and residuals ---
cat("\n[FINAL MODEL] Standardized solution:\n")
print(summary(fit_cfa_refined, standardized = TRUE))
# Print all negative residual variances (Heywood cases)
cat("\n[FINAL MODEL] Negative residual variances (Heywood cases):\n")
par_table <- lavaan::parTable(fit_cfa_refined)
neg_resid <- subset(par_table, op == "~~" & lhs == rhs & est < 0)
if (nrow(neg_resid) > 0) {
print(neg_resid[, c("lhs", "est")])
} else {
cat("None detected.\n")
}
# Plot residuals heatmap for the final model
cat("\n[FINAL MODEL] Residual correlation heatmap:\n")
resid_mat_final <- lavaan::residuals(fit_cfa_refined, type = "cor")$cov
heatmap(resid_mat_final, main = "Final CFA Residual Correlation Matrix", symm = TRUE)
# Print all MI > 10 for the final model
cat("\n[FINAL MODEL] Modification indices (MI > 10):\n")
mod_indices_final <- lavaan::modindices(fit_cfa_refined)
mod_indices_final <- mod_indices_final[order(-mod_indices_final$mi), ]
high_mi_final <- subset(mod_indices_final, mi > 10 & !(op == "~1" | op == "~"))
if (nrow(high_mi_final) > 0) {
print(high_mi_final[, c("lhs", "op", "rhs", "mi")])
} else {
cat("No MI > 10 remain.\n")
}
